openapi: 3.0.3
info:
  title: Polygon-Parts Manager
  description: CRUD operations to manage polygon parts
  version: 1.7.3
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /polygonParts:
    post:
      tags:
        - polygon-parts
      summary: Create new polygon parts
      description: Create new polygon parts
      operationId: createPolygonParts
      requestBody:
        description: Polygon parts metadata payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolygonPartsPayload'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolygonPartsEntityResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      tags:
        - polygon-parts
      parameters:
        - in: query
          name: isSwap
          schema:
            type: boolean
            default: false
          description: Defines if operation is a swap update
      summary: Update an existing polygon parts
      description: Update an existing polygon parts
      operationId: updatePolygonParts
      requestBody:
        description: Polygon parts metadata payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolygonPartsPayload'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolygonPartsEntityResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /polygonParts/exists:
    post:
      tags:
        - polygon-parts
      summary: Check polygon parts entity exists
      description: Check polygon parts entity exists
      operationId: existsPolygonParts
      requestBody:
        description: Polygon parts exists payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExistsPayload'
        required: true
      responses:
        '200':
          description: Polygon parts entity exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolygonPartsEntityResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Polygon parts entity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /polygonParts/{polygonPartsEntityName}/find:
    post:
      tags:
        - polygon-parts
      summary: Find and filter polygon parts based on spatial criteria
      description: >
        Search for polygon parts based on spatial intersection with search
        geometries. Takes a GeoJSON FeatureCollection of search geometries with
        optional resolution filters.

          **Filter Logic**
          - Returns polygon parts intersecting with input search geometries
          - Resolution filters (`maxResolutionDeg`/`minResolutionDeg`) can be specified in feature properties
          - Input feature IDs are tracked in response via `requestFeatureId`
          - Empty request or empty features array perform unfiltered search
          - With `shouldClip=true` (default):
            - Geometries clipped to search geometries
            - Feature ID maps 1:1 between input and output features via `requestFeatureId`
          - With `shouldClip=false`:
            - Returns original geometries
            - Feature IDs maps 1:many, if part intersects multiple search geometries. responds with an array if there is more than 1 ID map
      operationId: findPolygonParts
      parameters:
        - in: path
          name: polygonPartsEntityName
          description: Polygon parts entity name
          schema:
            $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/PolygonPartsEntityName
          required: true
        - in: query
          name: shouldClip
          description: >-
            Clips results to search area when true, returns complete geometries
            when false
          schema:
            type: boolean
            default: true
      requestBody:
        description: Polygon parts find filter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolygonPartsFindPayload'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolygonPartsFindResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /polygonParts/{polygonPartsEntityName}/aggregate:
    post:
      tags:
        - polygon-parts
      summary: >-
        Get aggregated polygon parts data by polygon parts entity name and
        polygon parts filter (optional)
      description: >-
        Get aggregated polygon parts data by polygon parts entity name and
        polygon parts filter (optional)
      operationId: aggregationLayerMetadata
      parameters:
        - in: path
          name: polygonPartsEntityName
          description: Polygon parts entity name
          schema:
            $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/PolygonPartsEntityName
          required: true
      requestBody:
        description: Aggregation filter (feature collection)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AggregationFilterPayload'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregationFeature'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
components:
  schemas:
    AggregationFeature:
      type: object
      description: Aggregation feature
      required:
        - type
        - properties
        - geometry
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          type: object
          nullable: true
          anyOf:
            - $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/Polygon
            - $ref: >-
                ./SchemaRaster/core/geojson.yaml#/components/schemas/MultiPolygon
            - type: object
              nullable: true
        properties:
          type: object
          description: Aggregation feature properties
          nullable: true
          required:
            - imagingTimeBeginUTC
            - imagingTimeEndUTC
            - maxHorizontalAccuracyCE90
            - maxResolutionDeg
            - maxResolutionMeter
            - minHorizontalAccuracyCE90
            - minResolutionDeg
            - minResolutionMeter
            - productBoundingBox
            - sensors
          properties:
            imagingTimeBeginUTC:
              $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ImagingTimeBeginUTC
            imagingTimeEndUTC:
              $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ImagingTimeEndUTC
            maxResolutionDeg:
              allOf:
                - $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ResolutionDegree
                - description: Maximal resolution of layer in degrees/pixel
            minResolutionDeg:
              allOf:
                - $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ResolutionDegree
                - description: Minimal resolution of layer in degrees/pixel
            maxResolutionMeter:
              allOf:
                - $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ResolutionMeter
                - description: Maximal resolution of layer in meters
            minResolutionMeter:
              allOf:
                - $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ResolutionMeter
                - description: Minimal resolution of layer in meters
            maxHorizontalAccuracyCE90:
              allOf:
                - $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/HorizontalAccuracyCE90
                - description: Maximal horizontal accuracy
            minHorizontalAccuracyCE90:
              allOf:
                - $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/HorizontalAccuracyCE90
                - description: Minimal horizontal accuracy
            productBoundingBox:
              $ref: ./SchemaRaster/core/layer.yaml#/components/schemas/ProductBBox
            sensors:
              $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/Sensors
    AggregationFilterPayload:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/RoiFeatureCollection'
      required:
        - filter
      description: Aggregation filter payload by feature collection
    ExistsPayload:
      type: object
      additionalProperties: false
      required:
        - productId
        - productType
      properties:
        productId:
          $ref: ./SchemaRaster/core/layer.yaml#/components/schemas/ProductId
        productType:
          $ref: ./SchemaRaster/core/layer.yaml#/components/schemas/ProductType
    FeatureCollectionFindResponse:
      type: object
      description: GeoJSON Feature collection
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/FeatureFindResponse'
        bbox:
          $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/BBox
    FeatureFindResponse:
      required:
        - type
        - properties
        - geometry
      properties:
        type:
          type: string
          enum:
            - Feature
        id:
          $ref: '#/components/schemas/FeatureId'
        properties:
          $ref: '#/components/schemas/PolygonPartsFindResponseFeatureProperties'
        geometry:
          $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/Polygon
        bbox:
          $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/BBox
    FeatureId:
      oneOf:
        - type: number
        - type: string
    RoiFeatureCollection:
      type: object
      nullable: true
      description: GeoJSON Feature collection
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/RoiFeaturePayload'
        bbox:
          $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/BBox
    RoiFeaturePayload:
      required:
        - type
        - properties
        - geometry
      properties:
        type:
          type: string
          enum:
            - Feature
        id:
          $ref: '#/components/schemas/FeatureId'
        properties:
          type: object
          nullable: true
          properties:
            maxResolutionDeg:
              $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ResolutionDegree
            minResolutionDeg:
              $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ResolutionDegree
        geometry:
          type: object
          oneOf:
            - $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/Polygon
            - $ref: >-
                ./SchemaRaster/core/geojson.yaml#/components/schemas/MultiPolygon
        bbox:
          $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/BBox
    PartData:
      type: object
      description: Part data
      required:
        - sourceName
        - imagingTimeBeginUTC
        - imagingTimeEndUTC
        - footprint
        - resolutionDegree
        - resolutionMeter
        - sourceResolutionMeter
        - horizontalAccuracyCE90
        - sensors
      properties:
        sourceId:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/SourceId
        sourceName:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/SourceName
        imagingTimeBeginUTC:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ImagingTimeBeginUTC
        imagingTimeEndUTC:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ImagingTimeEndUTC
        resolutionDegree:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ResolutionDegree
        resolutionMeter:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ResolutionMeter
        sourceResolutionMeter:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/SourceResolutionMeter
        horizontalAccuracyCE90:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/HorizontalAccuracyCE90
        sensors:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/Sensors
        countries:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/Countries
        cities:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/Cities
        description:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/Description
        footprint:
          $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/Polygon
    PartsData:
      type: array
      items:
        $ref: '#/components/schemas/PartData'
      minItems: 1
      description: parts data
    PolygonPartsEntityResponse:
      type: object
      description: Polygon parts entity response
      required:
        - polygonPartsEntityName
      properties:
        polygonPartsEntityName:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/PolygonPartsEntityName
    PolygonPartsFindPayload:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/RoiFeatureCollection'
      required:
        - filter
      description: Find polygon parts payload
    PolygonPartsFindResponse:
      allOf:
        - $ref: '#/components/schemas/FeatureCollectionFindResponse'
        - description: Find polygon parts response
    PolygonPartsFindResponseFeatureProperties:
      type: object
      required:
        - catalogId
        - cities
        - countries
        - description
        - horizontalAccuracyCE90
        - id
        - imagingTimeBeginUTC
        - imagingTimeEndUTC
        - ingestionDateUTC
        - partId
        - productId
        - productType
        - productVersion
        - resolutionDegree
        - resolutionMeter
        - sensors
        - sourceId
        - sourceName
        - sourceResolutionMeter
      properties:
        catalogId:
          $ref: ./SchemaRaster/core/layer.yaml#/components/schemas/LayerId
        cities:
          oneOf:
            - $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/Cities
            - type: object
              nullable: true
        countries:
          oneOf:
            - $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/Countries
            - type: object
              nullable: true
        description:
          oneOf:
            - $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/Description
            - type: object
              nullable: true
        horizontalAccuracyCE90:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/HorizontalAccuracyCE90
        id:
          allOf:
            - $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/Id
            - description: Polygon part's identifier
        imagingTimeBeginUTC:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ImagingTimeBeginUTC
        imagingTimeEndUTC:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ImagingTimeEndUTC
        ingestionDateUTC:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/IngestionDateUTC
        partId:
          allOf:
            - $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/Id
            - description: Part identifier
        productId:
          $ref: ./SchemaRaster/core/layer.yaml#/components/schemas/ProductId
        productType:
          $ref: ./SchemaRaster/core/layer.yaml#/components/schemas/ProductType
        productVersion:
          $ref: ./SchemaRaster/core/layer.yaml#/components/schemas/ProductVersion
        requestFeatureId:
          description: >-
            If shouldClip is set to true, only a single FeatureId is returned
            per Feature. Otherwise, it can return either a single FeatureId or
            an array of FeatureIds per Feature
          oneOf:
            - $ref: '#/components/schemas/FeatureId'
            - type: array
              items:
                $ref: '#/components/schemas/FeatureId'
        resolutionDegree:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ResolutionDegree
        resolutionMeter:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/ResolutionMeter
        sensors:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/Sensors
        sourceId:
          oneOf:
            - $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/SourceId
            - type: object
              nullable: true
        sourceName:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/SourceName
        sourceResolutionMeter:
          $ref: ./SchemaRaster/core/polygon-parts.yaml#/components/schemas/SourceResolutionMeter
    PolygonPartsPayload:
      type: object
      required:
        - catalogId
        - productId
        - productType
        - productVersion
        - partsData
      properties:
        catalogId:
          $ref: ./SchemaRaster/core/layer.yaml#/components/schemas/LayerId
        productId:
          $ref: ./SchemaRaster/core/layer.yaml#/components/schemas/ProductId
        productType:
          $ref: ./SchemaRaster/core/layer.yaml#/components/schemas/ProductType
        productVersion:
          $ref: ./SchemaRaster/core/layer.yaml#/components/schemas/ProductVersion
        partsData:
          $ref: '#/components/schemas/PartsData'
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
        stacktrace:
          type: string
      required:
        - message
