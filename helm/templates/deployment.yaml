{{- $releaseName := .Release.Name -}}
{{- $chartName := include "polygon-parts-manager.name" . -}}
{{- $configmapName := include "configmap.fullname" . }}
{{- $deploymentName := include "deployment.fullname" . }}
{{- $cloudProviderFlavor := include "polygon-parts-manager.cloudProviderFlavor" . -}}
{{- $cloudProviderDockerRegistryUrl := include "polygon-parts-manager.cloudProviderDockerRegistryUrl" . -}}
{{- $cloudProviderImagePullSecretName := include "polygon-parts-manager.cloudProviderImagePullSecretName" . -}}
{{- $imageTag := include "polygon-parts-manager.tag" . -}}
{{- $metrics := (include "common.metrics.merged" .) | fromYaml }}
{{- $db := (include "common.db.merged" .) | fromYaml }}
{{- $postgresSecretName := ternary $db.secrets.externalSecretName (printf "%s%s" .Release.Name "-postgres-secret") $db.secrets.useExternal -}}

{{- if .Values.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $deploymentName }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    environment: {{ include "polygon-parts-manager.environment" . }}
    release: {{ $releaseName }}
    {{- include "polygon-parts-manager.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ $chartName }}
      release: {{ $releaseName }}
      run: {{ $releaseName }}-{{ $chartName }}
      {{- include "polygon-parts-manager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ $chartName }}
        release: {{ $releaseName }}
        run: {{ $releaseName }}-{{ $chartName }}
        {{- include "polygon-parts-manager.selectorLabels" . | nindent 8 }}
      annotations:
        {{- if .Values.resetOnConfigChange }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if $metrics.enabled }}
        prometheus.io/port: {{ $metrics.prometheus.port | quote }}
        prometheus.io/scrape: {{ $metrics.prometheus.scrape | quote }}
        {{- end }}
        {{- if .Values.podAnnotations }}
        {{- toYaml .Values.podAnnotations | nindent 8 }}
        {{- end }}
    spec:
    {{- if $cloudProviderImagePullSecretName }}
      imagePullSecrets:
        - name: {{ $cloudProviderImagePullSecretName | quote }}
    {{- end }}
      containers:
        - name: {{ $releaseName }}-{{ $chartName }}-deployment
          {{- with .Values.image }}
          image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ $imageTag }}
          {{- end }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          volumeMounts:
            {{- if .Values.global.ca.secretName }}
            - mountPath: {{ printf "%s/%s" .Values.global.ca.path .Values.global.ca.key | quote }}
              name: root-ca
              subPath: {{ quote .Values.global.ca.key }}
            {{- end }}
            {{- if $db.sslEnabled  }}
            - name: db-certs
              mountPath: {{ $db.sslAuth.sslMountPath }}
            {{- end }}
          env:
            - name: SERVER_PORT
              value: {{ .Values.env.targetPort | quote }}
            {{- if .Values.global.ca.secretName }}
            - name: REQUESTS_CA_BUNDLE
              value: {{ printf "%s/%s" .Values.global.ca.path .Values.global.ca.key | quote }}
            - name: NODE_EXTRA_CA_CERTS
              value: {{ printf "%s/%s" .Values.global.ca.path .Values.global.ca.key | quote }}
            {{- end }}
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ $postgresSecretName }}
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $postgresSecretName }}
                  key: password
          envFrom:
            - configMapRef:
                name: {{ $configmapName }}
          ports:
            - name: http
              containerPort: {{ .Values.env.targetPort }}
              protocol: {{ .Values.env.protocol }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            httpGet:
              path: /liveness
              port: {{ .Values.env.targetPort }}
          {{- if .Values.resources.enabled }}
          resources:
            {{- toYaml .Values.resources.value | nindent 12 }}
          {{- end }}
      volumes:
        {{- if .Values.global.ca.secretName }}
        - name: root-ca
          secret:
            secretName: {{ .Values.global.ca.secretName }}
        {{- end }}
        {{- if $db.sslEnabled }}
        - name: db-certs
          secret:
            secretName: {{ $postgresSecretName }}
        {{- end }}
{{- end -}}
