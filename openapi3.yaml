openapi: 3.0.3
info:
  title: Polygon-Parts Manager
  description: CRUD operations to manage polygon parts
  version: 1.7.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /polygonParts:
    post:
      tags:
        - polygon-parts
      summary: Create new polygon parts
      description: Create new polygon parts
      operationId: createPolygonParts
      requestBody:
        description: Polygon parts metadata payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolygonPartsPayload'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolygonPartsEntityResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      tags:
        - polygon-parts
      parameters:
        - in: query
          name: isSwap
          schema:
            type: boolean
            default: false
          description: Defines if operation is a swap update
      summary: Update an existing polygon parts
      description: Update an existing polygon parts
      operationId: updatePolygonParts
      requestBody:
        description: Polygon parts metadata payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolygonPartsPayload'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolygonPartsEntityResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /polygonParts/{polygonPartsEntityName}/find:
    post:
      tags:
        - polygon-parts
      summary: Find and filter polygon parts based on spatial criteria
      description: >
        Search for polygon parts based on spatial intersection with search
        geometries. Takes a GeoJSON FeatureCollection of search geometries with
        optional resolution filters.

          **Filter Logic**
          - Returns polygon parts intersecting with input search geometries
          - Resolution filters (`maxResolutionDeg`/`minResolutionDeg`) can be specified in feature properties
          - Input feature IDs are tracked in response via `requestFeatureId`
          - Empty request or empty features array perform unfiltered search
          - With `shouldClip=true` (default):
            - Geometries clipped to search geometries
            - Feature ID maps 1:1 between input and output features via `requestFeatureId`
          - With `shouldClip=false`:
            - Returns original geometries
            - Feature IDs maps 1:many, if part intersects multiple search geometries. responds with an array if there is more than 1 ID map
      operationId: findPolygonParts
      parameters:
        - in: path
          name: polygonPartsEntityName
          description: Polygon parts entity name
          schema:
            $ref: '#/components/schemas/PolygonPartsEntityName'
          required: true
        - in: query
          name: shouldClip
          description: >-
            Clips results to search area when true, returns complete geometries
            when false
          schema:
            type: boolean
            default: true
      requestBody:
        description: Polygon parts find filter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolygonPartsFindPayload'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolygonPartsFindResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /polygonParts/{polygonPartsEntityName}/aggregate:
    post:
      tags:
        - polygon-parts
      summary: >-
        Get aggregated polygon parts data by polygon parts entity name and
        polygon parts filter (optional)
      description: >-
        Get aggregated polygon parts data by polygon parts entity name and
        polygon parts filter (optional)
      operationId: aggregationLayerMetadata
      parameters:
        - in: path
          name: polygonPartsEntityName
          description: Polygon parts entity name
          schema:
            $ref: '#/components/schemas/PolygonPartsEntityName'
          required: true
      requestBody:
        description: Aggregation filter (feature collection)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AggregationFilterPayload'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregationFeature'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
components:
  schemas:
    AggregationFeature:
      type: object
      description: Aggregation feature
      required:
        - type
        - properties
        - geometry
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          type: object
          nullable: true
          anyOf:
            - $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/Polygon
            - $ref: >-
                ./SchemaRaster/core/geojson.yaml#/components/schemas/MultiPolygon
            - type: object
              nullable: true
        properties:
          type: object
          description: Aggregation feature properties
          nullable: true
          required:
            - imagingTimeBeginUTC
            - imagingTimeEndUTC
            - maxHorizontalAccuracyCE90
            - maxResolutionDeg
            - maxResolutionMeter
            - minHorizontalAccuracyCE90
            - minResolutionDeg
            - minResolutionMeter
            - productBoundingBox
            - sensors
          properties:
            imagingTimeBeginUTC:
              $ref: '#/components/schemas/ImagingTimeBeginUTC'
            imagingTimeEndUTC:
              $ref: '#/components/schemas/ImagingTimeEndUTC'
            maxResolutionDeg:
              allOf:
                - $ref: '#/components/schemas/ResolutionDegree'
                - description: Maximal resolution of layer in degrees/pixel
            minResolutionDeg:
              allOf:
                - $ref: '#/components/schemas/ResolutionDegree'
                - description: Minimal resolution of layer in degrees/pixel
            maxResolutionMeter:
              allOf:
                - $ref: '#/components/schemas/ResolutionMeter'
                - description: Maximal resolution of layer in meters
            minResolutionMeter:
              allOf:
                - $ref: '#/components/schemas/ResolutionMeter'
                - description: Minimal resolution of layer in meters
            maxHorizontalAccuracyCE90:
              allOf:
                - $ref: '#/components/schemas/HorizontalAccuracyCE90'
                - description: Maximal horizontal accuracy
            minHorizontalAccuracyCE90:
              allOf:
                - $ref: '#/components/schemas/HorizontalAccuracyCE90'
                - description: Minimal horizontal accuracy
            productBoundingBox:
              $ref: '#/components/schemas/BoundingBox'
            sensors:
              $ref: '#/components/schemas/Sensors'
    BoundingBox:
      type: string
      pattern: >-
        ^-?(0|[1-9]\d*)(\.\d*)?,-?(0|[1-9]\d*)(\.\d*)?,-?(0|[1-9]\d*)(\.\d*)?,-?(0|[1-9]\d*)(\.\d*)?$
    CatalogId:
      type: string
      format: uuid
      description: Layer's identifier
      example: c52d8189-7e07-456a-8c6b-53859523c3e9
    Cities:
      type: array
      items:
        type: string
      description: Cities included in the part
      nullable: true
    Countries:
      type: array
      items:
        type: string
      description: Countries included in the part
      nullable: true
    Description:
      type: string
      nullable: true
    RoiFeaturePayload:
      required:
        - type
        - properties
        - geometry
      properties:
        type:
          type: string
          enum:
            - Feature
        id:
          $ref: '#/components/schemas/FeatureId'
        properties:
          type: object
          nullable: true
          properties:
            maxResolutionDeg:
              $ref: '#/components/schemas/ResolutionDegree'
            minResolutionDeg:
              $ref: '#/components/schemas/ResolutionDegree'
        geometry:
          type: object
          oneOf:
            - $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/Polygon
            - $ref: >-
                ./SchemaRaster/core/geojson.yaml#/components/schemas/MultiPolygon
        bbox:
          $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/BBox
    FeatureFindResponse:
      required:
        - type
        - properties
        - geometry
      properties:
        type:
          type: string
          enum:
            - Feature
        id:
          $ref: '#/components/schemas/FeatureId'
        properties:
          $ref: '#/components/schemas/PolygonPartsFindResponseFeatureProperties'
        geometry:
          $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/Polygon
        bbox:
          $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/BBox
    FeatureId:
      oneOf:
        - type: number
        - type: string
    RoiFeatureCollection:
      type: object
      nullable: true
      description: GeoJSON Feature collection
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/RoiFeaturePayload'
        bbox:
          $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/BBox
    FeatureCollectionFindResponse:
      type: object
      description: GeoJSON Feature collection
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/FeatureFindResponse'
        bbox:
          $ref: ./SchemaRaster/core/geojson.yaml#/components/schemas/BBox
    Id:
      type: string
      format: uuid
      description: Polygon part's identifier
      example: d56b406d-e5f2-4818-a525-bd996cae60b5
    HorizontalAccuracyCE90:
      type: number
      minimum: 0.01
      maximum: 4000
      format: double
      description: Horizontal accuracy
    ImagingTimeBeginUTC:
      type: string
      description: Oldest imaging date (UTC)
      format: date-time
    ImagingTimeEndUTC:
      type: string
      description: Latest imaging date (UTC)
      format: date-time
    IngestionDateUTC:
      type: string
      description: Ingestion date (UTC)
      format: date-time
    PolygonPartsEntityName:
      type: string
      description: Polygon parts entity name
      pattern: ^[a-z][a-z0-9_]{0,61}[a-z0-9]$
      example: world_orthophoto
    PolygonPartsEntityResponse:
      type: object
      description: Polygon parts entity response
      required:
        - polygonPartsEntityName
      properties:
        polygonPartsEntityName:
          $ref: '#/components/schemas/PolygonPartsEntityName'
    PolygonPartsFindPayload:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/RoiFeatureCollection'
      required:
        - filter
      description: Find polygon parts payload
    PolygonPartsFindResponse:
      allOf:
        - $ref: '#/components/schemas/FeatureCollectionFindResponse'
        - description: Find polygon parts response
    PolygonPartsFindResponseFeatureProperties:
      type: object
      required:
        - catalogId
        - cities
        - countries
        - description
        - horizontalAccuracyCE90
        - id
        - imagingTimeBeginUTC
        - imagingTimeEndUTC
        - ingestionDateUTC
        - partId
        - productId
        - productType
        - productVersion
        - resolutionDegree
        - resolutionMeter
        - sensors
        - sourceId
        - sourceName
        - sourceResolutionMeter
      properties:
        catalogId:
          $ref: '#/components/schemas/CatalogId'
        cities:
          $ref: '#/components/schemas/Cities'
        countries:
          $ref: '#/components/schemas/Countries'
        description:
          $ref: '#/components/schemas/Description'
        horizontalAccuracyCE90:
          $ref: '#/components/schemas/HorizontalAccuracyCE90'
        id:
          $ref: '#/components/schemas/Id'
        imagingTimeBeginUTC:
          $ref: '#/components/schemas/ImagingTimeBeginUTC'
        imagingTimeEndUTC:
          $ref: '#/components/schemas/ImagingTimeEndUTC'
        ingestionDateUTC:
          $ref: '#/components/schemas/IngestionDateUTC'
        partId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: Part identifier
        productId:
          $ref: '#/components/schemas/ProductId'
        productType:
          $ref: >-
            ./Schema/ingestionTrigger/metadata/rasterLayerMetadata.yaml#/components/schemas/productType
        productVersion:
          $ref: '#/components/schemas/ProductVersion'
        requestFeatureId:
          description: >-
            If shouldClip is set to true, only a single FeatureId is returned
            per Feature. Otherwise, it can return either a single FeatureId or
            an array of FeatureIds per Feature
          oneOf:
            - $ref: '#/components/schemas/FeatureId'
            - type: array
              items:
                $ref: '#/components/schemas/FeatureId'
        resolutionDegree:
          $ref: '#/components/schemas/ResolutionDegree'
        resolutionMeter:
          $ref: '#/components/schemas/ResolutionMeter'
        sensors:
          $ref: '#/components/schemas/Sensors'
        sourceId:
          $ref: '#/components/schemas/SourceId'
        sourceName:
          $ref: '#/components/schemas/SourceName'
        sourceResolutionMeter:
          $ref: '#/components/schemas/SourceResolutionMeter'
    AggregationFilterPayload:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/RoiFeatureCollection'
      required:
        - filter
      description: Aggregation filter payload by feature collection
    PolygonPartsPayload:
      $ref: >-
        ./Schema/polygonPartsManager/payload.yaml#/components/schemas/PolygonPartsPayload
    ProductId:
      type: string
      description: Layer's external identifier
      pattern: ^[A-Za-z]{1}[A-Za-z0-9_]{0,37}$
      example: BLUE_MARBLE
    ProductVersion:
      type: string
      pattern: ^[1-9]\d*(\.(0|[1-9]\d?))?$
      description: Layer's version
      example: 1.23
    ResolutionDegree:
      type: number
      minimum: 1.67638e-7
      maximum: 0.703125
      format: double
      description: Resolution of layer in degrees/pixel
    ResolutionMeter:
      type: number
      minimum: 0.0185
      maximum: 78271.52
      format: double
      description: Resolution of layer in meters
    Sensors:
      type: array
      items:
        type: string
        pattern: ^(?!\s).+(?<!\s)$
      minItems: 1
      description: Layer's sensors list
    SourceId:
      type: string
      description: Layer's external identifier
      nullable: true
    SourceName:
      type: string
      description: Layer's external name
    SourceResolutionMeter:
      type: number
      minimum: 0.0185
      maximum: 78271.52
      format: double
      description: Resolution of layer in meters
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
        stacktrace:
          type: string
      required:
        - message
